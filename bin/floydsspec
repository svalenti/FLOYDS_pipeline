#!/usr/bin/env python

import sys
import glob
import floyds
import time
from floyds.util import readhdr, readkey3
from optparse import OptionParser

description = "> Specroscopic pre-reduction of floyds data "
usage = "%prog  \t [listfile -i -A -C -f listflat (use raw flat frames from this list) .....]"

if __name__ == "__main__":
    parser = OptionParser(usage=usage, description=description, version="%prog " + str(floyds.__version__))
    parser.add_option("-i", "--interactive", dest="interactive", action="store_true",
                      help='run the script in interactive mode [recommended] ')
    parser.add_option("-c", "--classify", dest="classify", action="store_true",
                      help='try to classifyed the reduced spectrum using SNID (if installed) ')
    parser.add_option("-C", "--cosmic", dest="cosmic", action="store_true",
                      help='using this option cosmic rays are removed from the images. WARNING: If you have a '
                           'very bright trace, this option may significantly degrade your data. ')
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true")
    parser.add_option("-A", "--Automatic", dest="automatic", action="store_true",
                      help='extract spectrum with previous parameters in the database')
    parser.add_option("-t", "--trace", dest="trace", action="store_true",
                      help='trace extraction with another frame ')
    parser.add_option("-d", "--dispersion", dest="dispersionline", action="store_true",
                      help='choose interctively the disperasion line\n where aperture and background are selected')
    parser.add_option("-r", "--rebin", dest="rebin", default=1, type=int, help='rebin blue part [pixels]')
    parser.add_option("--fringing", dest="fringing", default=3, type=int,
                      help='fringing correction \t [1] response, \t [2] computed' + \
                           ' on 1d images minimizing scatter,\t [3] using apflatten')
    parser.add_option("--noflat", dest="doflat", action="store_false", help=' skip flat correction ')
    # parser.add_option("-b", "--bias",dest="dobias",action="store_false", help= ' skip bias corection')
    #     parser.add_option("-B", "--listbias",dest="listbias",default='',type="str",
    #                  help='use bias in the list \t [%default]')
    parser.add_option("--listsens", dest="listsens", default='', type="str",
                      help='use sensitivity curve from this list')
    parser.add_option("--listflat", dest="listflat", default='', type="str",
                      help='use for the flat the raw frames in the flat list\t[%default]')
    parser.add_option("--listarc", dest="listarc", default='', type="str",
                      help='use for the arc the raw frames in the arc list \t [%default]')
    parser.add_option("--listatmo", dest="listatmo", default='', type="str",
                      help='use for telluric correction the closest telluric file from this list')
    parser.add_option("--typeobject", dest="typeobject", default='obj', type="str",
                      help='choose extraction parameters depending on the type of object [obj,agn]')
    parser.add_option("--fts-contaminated", dest="fts_contaminated", default=None, action="store_true",
                      help='force a high-order fit for the sensitivity function (used by default for FTS data from 2014-09-15 to 2015-06-16)')
    parser.add_option("--fts-cleaned", dest="fts_contaminated", default=None, action="store_false",
                      help='prevent a high-order fit for the sensitivity function (used by default for FTS data from 2014-09-15 to 2015-06-16)')
    option, args = parser.parse_args()
    ############################################################
    _typefromuser = option.typeobject
    if _typefromuser not in ['obj', 'agn', 'std']:
        sys.argv.append('--help')
    option, args = parser.parse_args()
    starttime = time.time()
    if len(args) > 1:
        sys.argv.append('--help')
        option, args = parser.parse_args()
    elif len(args) == 1:
        files = floyds.util.readlist(args[0])
    else:
        listfile1 = glob.glob('g_e_*00.fits')
        listfile2 = glob.glob('f_e_*00.fits')
        listfile3 = glob.glob('ogg2m001*00.fits')
        listfile4 = glob.glob('coj2m002*00.fits')
        listfile = listfile1 + listfile2 + listfile3 + listfile4
        files = []
        print 'making the list with raw data in the current directory ...... please wait'
        for img in listfile:
            hdr0 = readhdr(img)
            if readkey3(hdr0, 'instrume') in ['en05', 'en06', 'en12']:
                _type = ''
                _naxis1 = readkey3(hdr0, 'NAXIS1')
                _naxis2 = readkey3(hdr0, 'NAXIS2')
                _imagetype = readkey3(hdr0, 'OBSTYPE')
                if not _imagetype:
                    _imagetype = readkey3(hdr0, 'imagetyp')
                #               print _imagetype
                #               raw_input('dd')
                if _naxis1 != 2079 or (_naxis2 != 511 and _naxis2 != 512):
                    _type = 'not standard dimension 2079x511'
                #if not _type and readkey3(hdr0,'instrume') not in ['en05','en06']:                _type='not floyds intrument'
                if '-e00.fits' in img:
                    _type = 'sky'
                if _imagetype and not _type:
                    if _imagetype.lower() in ['lampflat', 'lamp-flat', 'flat', 'f']:
                        _type = 'flat'
                    elif _imagetype.lower() in ['spectrum', 'sky', 's']:
                        _type = 'sky'
                    elif _imagetype.lower() in ['arc', 'lamp', 'l']:
                        _type = 'lamp'
                if not _type:
                    _exptime = readkey3(hdr0, 'exptime')
                    if not _type:
                        if float(_exptime) == 0.0:
                            _type = 'bias'
                    if not _type:
                        print 'warning: object not recognized '
                        _object = readkey3(hdr0, 'object')
                        _filter = readkey3(hdr0, 'filter')
                        print img, _object, _imagetype, _filter, _exptime
                        answ = raw_input('what is it: bias [1], flat [3], object[4], not good [5] ?  [5] ')
                        if not answ:  answ = '5'
                        if answ == '1':
                            _type = 'bias'
                        elif answ == '3':
                            _type = 'flat'
                        elif answ == '4':
                            _type = 'object'
                        elif answ == '5':
                            _type = 'not good'
                if _type in ['flat', 'sky', 'lamp', 'bias', 'object']:
                    files.append(img)
    _verbose = option.verbose
    if not _verbose:
        _verbose = False
    _classify = option.classify
    if not _classify:
        _classify = False
    if option.interactive == None:
        _interactive = 'no'
    else:
        _interactive = 'yes'
    _cosmic = option.cosmic
    if not _cosmic:
        _cosmic = False
    #     if option.dobias==None:    _dobias=True
    #     else:    _dobias=option.dobias
    #     if option.listbias:    listbias=floyds.util.readlist(option.listbias)
    #     else:                  listbias=''
    _dobias = False
    listbias = ''
    if option.doflat == None:
        _doflat = True
    else:
        _doflat = option.doflat
    if option.listflat:
        listflat = floyds.util.readlist(option.listflat)
    else:
        listflat = ''
    if option.listarc:
        listarc = floyds.util.readlist(option.listarc)
    else:
        listarc = ''
    if option.trace == None:
        _trace = 'no'
    else:
        _trace = 'yes'
    if option.dispersionline == None:
        _dispersionline = False
    else:
        _dispersionline = option.dispersionline
    if option.automatic == None:
        _automaticex = False
    else:
        _automaticex = option.automatic
    if option.listsens:
        listsens = floyds.util.readlist(option.listsens)
    else:
        listsens = ''
    if option.listatmo:
        listatmo = floyds.util.readlist(option.listatmo)
    else:
        listatmo = ''
    _rebin = option.rebin
    _fringing = option.fringing
    if len(files) > 0:
        outputlist = floyds.floydsspecdef.floydsspecreduction(files, _interactive, _dobias, _doflat, listflat,
                                                              listbias, listarc, _cosmic, _trace, _dispersionline,
                                                              listsens, listatmo, _automaticex, _classify, _verbose,
                                                              _rebin, _fringing, _typefromuser, option.fts_contaminated)
    else:
        outputlist = []
    stoptime = time.time()
    print 'runnning time ' + str(stoptime - starttime)
